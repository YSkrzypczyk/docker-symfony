<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin webmaster@localhost

                DocumentRoot /var/www/html/public

                # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
                # error, crit, alert, emerg.
                # It is also possible to configure the loglevel for particular
                # modules, e.g.
                #LogLevel info ssl:warn

                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined

                # For most configuration files from conf-available/, which are
                # enabled or disabled at a global level, it is possible to
                # include a line for only one particular virtual host. For example the
                # following line enables the CGI configuration for this host only
                # after it has been globally disabled with "a2disconf".
                #Include conf-available/serve-cgi-bin.conf

                #   SSL Engine Switch:
                #   Enable/Disable SSL for this virtual host.
                SSLEngine on

                #   A self-signed (snakeoil) certificate can be created by installing
                #   the ssl-cert package. See
                #   /usr/share/doc/apache2/README.Debian.gz for more info.
                #   If both key and certificate are stored in the same file, only the
                #   SSLCertificateFile directive is needed.
                SSLCertificateFile /etc/ssl/certs/mycert.crt
                SSLCertificateKeyFile /etc/ssl/private/mycert.key

                #   Server Certificate Chain:
                #   Point SSLCertificateChainFile at a file containing the
                #   concatenation of PEM encoded CA certificates which form the
                #   certificate chain for the server certificate. Alternatively
                #   the referenced file can be the same as SSLCertificateFile
                #   when the CA certificates are directly appended to the server
                #   certificate for convinience.
                #SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

                #   Certificate Authority (CA):
                #   Set the CA certificate verification path where to find CA
                #   certificates for client authentication or alternatively one
                #   huge file containing all of them (file must be PEM encoded)
                #   Note: Inside SSLCACertificatePath you need hash symlinks
                #                to point to the certificate files. Use the provided
                #                Makefile to update the hash symlinks after changes.
                #SSLCACertificatePath /etc/ssl/certs/
                #SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

                #   Certificate Revocation Lists (CRL):
                #   Set the CA revocation path where to find CA CRLs for client
                #   authentication or alternatively one huge file containing all
                #   of them (file must be PEM encoded)
                #   Note: Inside SSLCARevocationPath you need hash symlinks
                #                to point to the certificate files. Use the provided
                #                Makefile to update the hash symlinks after changes.
                #SSLCARevocationPath /etc/apache2/ssl.crl/
                #SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

                #   Client Authentication (Type):
                #   Client certificate verification type and depth.  Types are
                #   none, optional, require and optional_no_ca.  Depth is a
                #   number which specifies how deeply to verify the certificate
                #   issuer chain before deciding the certificate is not valid.
                #SSLVerifyClient require
                #SSLVerifyDepth  10

                #   SSL Engine Options:
                #   Set various options for the SSL engine.
                #   o FakeBasicAuth:
                #        Translate the client X.509 into a Basic Authorisation.  This means that
                #        the standard Auth/DBMAuth methods can be used for access control.  The
                #        user name is the `one line' version of the client's X.509 certificate.
                #        Note that no password is obtained from the user. Every entry in the user
                #        file needs this password: `xxj31ZMTZzkVA'.
                #   o ExportCertData:
                #        This exports two additional environment variables: SSL_CLIENT_CERT and
                #        SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
                #        server (always existing) and the client (only existing when client
                #        authentication is used). This can be used to import the certificates
                #        into CGI scripts.
                #   o StdEnvVars:
                #        This exports the standard SSL/TLS related `SSL_*' environment variables.
                #        Per default this exportation is switched off for performance reasons,
                #        because the extraction step is an expensive operation and is usually
                #        useless for serving static content. So one usually enables the
                #        exportation for CGI and SSI requests only.
                #   o OptRenegotiate:
                #        This enables optimized SSL connection renegotiation handling when SSL
                #        directives are used in per-directory context.
                #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>
                <Directory /usr/lib/cgi-bin>
                                SSLOptions +StdEnvVars
                </Directory>

                #   SSL Protocol Adjustments:
                #   The safe and default but still SSL/TLS standard compliant shutdown
                #   approach is that mod_ssl sends the close notify alert but doesn't wait for
                #   the close notify alert from client. When you need a different shutdown
                #   approach you can use one of the following variables:
                #   o ssl-unclean-shutdown:
                #        This forces an unclean shutdown when the connection is closed, i.e. no
                #        SSL close notify alert is send or allowed to received.  This violates
                #        the SSL/TLS standard but is needed for some brain-dead browsers. Use
                #        this when you receive I/O errors because of the standard approach where
                #        mod_ssl sends the close notify alert.
                #   o ssl-accurate-shutdown:
                #        This forces an accurate shutdown when the connection is closed, i.e. a
                #        SSL close notify alert is send and mod_ssl waits for the close notify
                #        alert of the client. This is 100% SSL/TLS standard compliant, but in
                #        practice often causes hanging connections with brain-dead browsers. Use
                #        this only for browsers where you know that their SSL implementation
                #        works correctly.
                #   Notice: Most problems of broken clients are also related to the HTTP
                #   keep-alive facility, so you usually additionally want to disable
                #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
                #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
                #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
                #   "force-response-1.0" for this.
                # BrowserMatch "MSIE [2-6]" \
                #               nokeepalive ssl-unclean-shutdown \
                #               downgrade-1.0 force-response-1.0

                <Directory /var/www/html/public>
                        AllowOverride None

                        # Use the front controller as index file. It serves as a fallback solution when
                        # every other rewrite/redirect fails (e.g. in an aliased environment without
                        # mod_rewrite). Additionally, this reduces the matching process for the
                        # start page (path "/") because otherwise Apache will apply the rewriting rules
                        # to each configured DirectoryIndex file (e.g. index.php, index.html, index.pl).
                        DirectoryIndex index.php

                        # By default, Apache does not evaluate symbolic links if you did not enable this
                        # feature in your server configuration. Uncomment the following line if you
                        # install assets as symlinks or if you experience problems related to symlinks
                        # when compiling LESS/Sass/CoffeScript assets.
                        # Options +FollowSymlinks

                        # Disabling MultiViews prevents unwanted negotiation, e.g. "/index" should not resolve
                        # to the front controller "/index.php" but be rewritten to "/index.php/index".
                        <IfModule mod_negotiation.c>
                            Options -MultiViews
                        </IfModule>

                        <IfModule mod_rewrite.c>
                            # This Option needs to be enabled for RewriteRule, otherwise it will show an error like
                            # 'Options FollowSymLinks or SymLinksIfOwnerMatch is off which implies that RewriteRule directive is forbidden'
                            Options +FollowSymlinks

                            RewriteEngine On

                            # Determine the RewriteBase automatically and set it as environment variable.
                            # If you are using Apache aliases to do mass virtual hosting or installed the
                            # project in a subdirectory, the base path will be prepended to allow proper
                            # resolution of the index.php file and to redirect to the correct URI. It will
                            # work in environments without path prefix as well, providing a safe, one-size
                            # fits all solution. But as you do not need it in this case, you can comment
                            # the following 2 lines to eliminate the overhead.
                            RewriteCond %{REQUEST_URI}::$0 ^(/.+)/(.*)::\2$
                            RewriteRule .* - [E=BASE:%1]

                            # Sets the HTTP_AUTHORIZATION header removed by Apache
                            RewriteCond %{HTTP:Authorization} .+
                            RewriteRule ^ - [E=HTTP_AUTHORIZATION:%0]

                            # Redirect to URI without front controller to prevent duplicate content
                            # (with and without `/index.php`). Only do this redirect on the initial
                            # rewrite by Apache and not on subsequent cycles. Otherwise we would get an
                            # endless redirect loop (request -> rewrite to front controller ->
                            # redirect -> request -> ...).
                            # So in case you get a "too many redirects" error or you always get redirected
                            # to the start page because your Apache does not expose the REDIRECT_STATUS
                            # environment variable, you have 2 choices:
                            # - disable this feature by commenting the following 2 lines or
                            # - use Apache >= 2.3.9 and replace all L flags by END flags and remove the
                            #   following RewriteCond (best solution)
                            RewriteCond %{ENV:REDIRECT_STATUS} =""
                            RewriteRule ^index\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

                            # If the requested filename exists, simply serve it.
                            # We only want to let Apache serve files and not directories.
                            # Rewrite all other queries to the front controller.
                            RewriteCond %{REQUEST_FILENAME} !-f
                            RewriteRule ^ %{ENV:BASE}/index.php [L]
                        </IfModule>

                        <IfModule !mod_rewrite.c>
                            <IfModule mod_alias.c>
                                # When mod_rewrite is not available, we instruct a temporary redirect of
                                # the start page to the front controller explicitly so that the website
                                # and the generated links can still be used.
                                RedirectMatch 307 ^/$ /index.php/
                                # RedirectTemp cannot be used instead
                            </IfModule>
                        </IfModule>

                    </Directory>
        </VirtualHost>
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
